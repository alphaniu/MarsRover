This is my project for MarsRover.


===========================================================================

Tools: Visual Studio 2017 Community, Windows 10 Professional.

I did not use any external DLLs in my design and implementation. My "~\packages" folder only included related MSTest packages for my Unit Tests. User can delete the "~\packages" folder and Unload "MarsRovers.UnitTest" to build the solution without Unit Tests.


===========================================================================

The solution contains the following projects:

MarsRovers.Classes.Contract:
This project is the interfaces (aka: contract) for my classes and methods implementations. This project gives a clear overview of my overall class designs for this assignment.
	IDirection: 	representing 4-way direction info used by rovers
	ICoordinate: 	representing x and y position info used by rovers
	IRover: 	representing rover with position and direction info, and rotate/move actions. Rover's move action will be limited by the plateau boundary.
	ISquad: 	representing the list of rovers will be deployed.
	IPlateau:	representing the operation area for the rover squad. If a rover deployed out of bound, it will be lost.
	IController:	takes input as a string, parse them, validate them, execute them, then output the result. Throw exceptions and terminate when necessary.


MarsRovers.Clases:
This project contains the implementations for each of the interfaces in the "MarsRovers.Classes.Contract" Also, it includes a custom exception:
	InvalidInputException:	Custom exception to deal with invalid input. Please see MarsRovers.Classes\Controller class and MarsRovers.UnitTest\TestException class for detailed usage. Added [assembly: InternalsVisibleTo("MarsRovers.UnitTest")] into AssemblyInfo.cs to for Unit Test Purpose


MarsRovers.UnitTest:
This is the Unit Test project for this assignment. 
	TestAll: 	Two sample inputs. Including the one provided by DealerOn.
	TestDeploy:	Test rover deployment, including deploy out of the plateau.
	TestMove:	Test rover move command, including hit the boundary.
	TestRotate:	Test rover rotate left and right by 90 degrees.
	TestException:	Test exception handlings by give out various wrong inputs, catch the exceptions and assert exception messages.


MarsRovers:
This is a console test program which takes input from a txt file (same directory with the exe), and print its output in the console. 
input.txt has the same test input from the sample provided by DealerOn.


===========================================================================

Test Instruction:

Option 1: 
Use MarsRovers:	Build the solution, copy the input.txt to the same directory with the exe generated by this project, then run the exe. Modify the input file to see different results.

Option 2: 
Run the unit tests with required MSTest packages included. See the test cases implementations and expect results. Modify the test cases to see different results.





	